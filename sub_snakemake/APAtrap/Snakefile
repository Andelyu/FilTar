#!/bin/bash

def get_bed_file(wildcards):
	if wildcards.species == 'hsa':
		return('results/Homo_sapiens.GRCh38.92.bed')
	elif wildcards.species == 'mmu':
		return('results/Mus_musculus.GRCm38.92.bed6')

# derived from https://gist.github.com/gireeshkbogu/f478ad8495dca56545746cd391615b93

rule convert_gtf_to_genepred: # need GLIBC_2.14 and GLIBC_2.17 I think
     input:
         script="exe/gtfToGenePred",
         gtf="data/Homo_sapiens.GRCh38.92.gtf"
     output:
         "results/Homo_sapiens.GRCh38.92.genePred"
     shell:
         "{input.script} {input.gtf} {output}"

rule convert_genepred_to_bed12:
     input:
         script="exe/genePredToBed",
         genepred="results/{species_prefix}.92.genePred"
     output:
         "results/{species_prefix}.92.bed"
     shell:
         "{input.script} {input.genepred} {output}"

rule get_chrom_sizes:
     input:
         "exe/fetchChromSizes"
     output:
         "results/{assembly}.chrom.sizes"
     shell:
         "{input} {wildcards.assembly} > results/{wildcards.assembly}.chrom.sizes"

rule get_bedgraph:
    input:
        sorted_bam="results/bam/{accession}.bam.sorted",
    output:
        "results/bam/run/{accession}.bedgraph"
    conda:
        "envs/bedtools.yaml"
    benchmark:
        "benchmarks/genomeCoverageBed/{accession}.txt"
    shell:
        "genomeCoverageBed -bg -ibam {input.sorted_bam} -split > {output}"

rule merge_bedgraphs_by_run:
        input:
             lambda wildcards: expand("results/bam/run/{accession}.bedgraph", accession=config['samples'][wildcards.sample])
        output:
             "results/bam/sample/{sample}_tmp.bedgraph"
        wildcard_constraints:
             sample="[E|D|S]RS.*"
        conda:
             "envs/bedtools.yaml"
        script: "merge_bedgraphs_by_sample.py"

rule avg_merged_bedgraph_by_run:
        input:
                "results/bam/sample/{sample}_tmp.bedgraph"
        output:
                "results/bam/sample/{sample}.bedgraph"
        wildcard_constraints:
             sample="[E|D|S]RS.*[0-9]"
        script:
                "get_average_bedgraph.R"

rule merge_bedgraphs_by_sample:
        input:
             lambda wildcards: expand("results/bam/sample/{sample}.bedgraph", sample=config['tissues'][wildcards.species][wildcards.cell_line])
        output:
             "results/bam/tissue/{species}/{cell_line}.bedgraph.tmp"
        conda:
             "envs/bedtools.yaml"
        shell: "bedtools unionbedg -i {input} > {output}"

rule avg_merged_bedgraph_by_sample:
        input:
                "results/bam/tissue/{species}/{cell_line}.bedgraph.tmp"
        output:
                "results/bam/tissue/{species}/{cell_line}.bedgraph"
        script:
                "get_average_bedgraph.R"

rule reannotate_3utrs:
    input:
       script="exe/identifyDistal3UTR.pl",
       bed=get_bed_file,
       bedgraphs= 'results/bam/tissue/{species}/{cell_line}.bedgraph'
    benchmark: "benchmarks/APAtrap/{species}_{cell_line}.log"
    output:
       "results/bed/specific/{species}_{cell_line}.utr.bed"
    shell:
       "{input.script} -i {input.bedgraphs} -m {input.bed} -o {output}"

