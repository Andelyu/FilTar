#!/bin/bash

def get_tax_id(wildcards):
        return(config['tax_ids'][wildcards.species])

def get_gtf_file(wildcards):
        sci_species_name = config['sci_species_name'][wildcards.species]
        genome_build = config['genome_build'][wildcards.species]

        return ( 'data/' + sci_species_name + '.' + genome_build + '.{}.mod.chr.gtf'.format(config['ensembl_release'])  )

### get AIR file 

rule gtf_to_bed_no_reannotation:
        input:
            gtf=get_gtf_file,
            script="exe/pre-processing/gtf_to_bed.sh"
        output:
            "results/bed/{species}_{feature}.bed"
        shell:
            "{input.script} {input.gtf} {wildcards.feature} {output}"

rule get_utr_lengths_no_reannotation:
        input:  'results/bed/{species}_3UTR.chr{chrom}.bed'
        output: 'results/targets/{species}_chr{chrom}.utr.lengths.tsv'
        script: 'get_utr_lengths.R'

rule get_air_file_no_reannotation:
	input: "results/targets/{species}_chr{chrom}.utr.lengths.tsv"
	output: 'results/targets/{species}_nr_chr{chrom}.AIRs.txt'
	script: 'get_canonical_AIR.R'

rule aggregate_chromosomal_AIR_files:
        input: lambda wildcards: expand("results/targets/{species}_chr{chrom}.utr.lengths.tsv", chrom=config['chromosomes'][wildcards.species], species=wildcards.species)
        output: 'results/targets/{species}_nr.AIRs.txt'
        script: 'get_canonical_AIR.R'

###

rule split_bed6:
        input: "results/bed/{species}_3UTR.bed"
        output: "results/bed/{species}_3UTR.chr{chrom}.bed"
        shell: 'grep -E "^{wildcards.chrom}" {input} > {output}'

rule filter_bed6_file_no_reannotation:
        input: "results/bed/{species}_{feature}.bed"
        output: "results/bed/{species}_nr_{feature}.bed"
        script: 'filter_bed6.R'

rule split_filtered_bed6:
	input: rules.filter_bed6_file_no_reannotation.output
	output: "results/bed/{species}_{feature}.chr{chrom}.nr.bed"
	shell: 'grep -E "^{wildcards.chrom}" {input} > {output} || true'


## get_utr_and_cds & targetscan sites

rule biopython_get_msa_nr:
        input:
           maf="data/maf_{species}/chr{chrom}.maf",
           bed="results/bed/{species}_{feature}.chr{chrom}.nr.bed",
           maf_index="data/{species}_chr{chrom}.mafindex"
        output:
           "results/msa/{species}_chr{chrom}_{feature}_msa_nr.tsv"
        conda:
           "envs/biopython.yaml"
        script:
           "biopython_maf_processing2.py"

rule targetscan_sites_nr:
        input:
           msa="results/msa/{species}_chr{chrom}_3UTR_msa_nr.tsv",
           mirna_families="results/{species}_mirna_family.tsv",
           script="exe/targetscan7/targetscan_70.patch.pl"
        output:
           "results/targets/{species}_chr{chrom}_msa.sites_nr.tmp.tsv"
        benchmark:
           "benchmarks/{species}_chr{chrom}_msa.sites.log"
        shell:
           "{input.script} {input.mirna_families} {input.msa} {output}"

rule fix_targetscan_sites_output_nr:
        input: rules.targetscan_sites_nr.output
        output: protected("results/targets/{species}_chr{chrom}_msa_nr.sites.tsv")
        script: "fix_ts_output.R"

rule aggregate_targetscan_sites_nr:
        input: lambda wildcards: expand("results/targets/{species}_chr{chrom}_msa_nr.sites.tsv", chrom=config['chromosomes'][wildcards.species], species=wildcards.species)
        output: "results/targets/{species}_msa_nr.sites.tsv"
        shell: "cat {input} | sed '1b;/Gene/d' > {output}"
