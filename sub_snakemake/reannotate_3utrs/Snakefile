#!/bin/bash

def get_bed6_file(wildcards):
	sci_species_name = config['sci_species_name'][wildcards.species]
        genome_build = config['genome_build'][wildcards.species]

	return ( 'results/' + sci_species_name + '.' + genome_build + '.{}.chr{}.filtered.bed6'.format(config['ensembl_release'], wildcards.chrom) )

rule get_bed6_file: #three_prime_utrs only
        input:
            script="exe/gtf_to_bed.sh",
            gtf="data/{prefix}.chr.gtf"
        output:
            "results/{prefix}.bed6"
        shell:
            "{input.script} {input.gtf} {output}"

rule split_bed6_file:
        input: 'results/{prefix}.bed6'
        output: 'results/{prefix}.chr{chrom}.bed6'
        shell: 'grep -E "^{wildcards.chrom}" {input} > {output}'

rule get_extended_bed_file:
         input:
            normal_bed= get_bed6_file,
            extended_bed="results/bed/{species}_{tissue}_chr{chrom}.utr.bed",
            all_transcripts="results/bed/{species}_chr{chrom}_all_transcripts.txt"
         output:
            "results/bed/{species}_{tissue}_3UTR.chr{chrom}.bed"
         log:
            "{species}_{tissue}_chr{chrom}.log"
         script:
             "extend_bed2.R"

#rule reformat_normal_bed_file:
#         input:
#           script="exe/reformat_normal_bed.R",
#           normal_bed="results/{species_prefix}.94.bed6"
#         output: "results/{species_prefix}.94.reformatted.bed6"
#         shell:
#             "Rscript {input.script} {input.normal_bed} {output}"
