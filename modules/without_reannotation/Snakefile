#    FilTar: Integrating RNA-Seq data to improve microRNA target prediction accuracy in animals
#    Copyright (C) 2019 Thomas Bradley
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>

def get_tax_id(wildcards):
        return(config['tax_ids'][wildcards.species])

def get_gtf_file(wildcards):
        sci_species_name = config['sci_species_name'][wildcards.species]
        genome_build = config['genome_build'][wildcards.species]

        return ( 'data/' + sci_species_name + '.' + genome_build + '.{}.mod2.chr.gtf'.format(config['ensembl_release'])  )

### get AIR file 

rule gtf_to_bed_no_reannotation:
        input:
            gtf=get_gtf_file,
            script="scripts/pre-processing/gtf_to_bed.sh"
        output:
            "results/bed/{species}_{feature}.bed"
        shell:
            "{input.script} {input.gtf} {wildcards.feature} {output}"

rule get_utr_lengths_no_reannotation:
        input:  'results/bed/{species}_3UTR.chr{chrom}.bed'
        output: 'results/targets/{species}_chr{chrom}.utr.lengths.tsv'
        script: 'get_utr_lengths.R'

rule get_utr_lengths_no_reannotation_full:
        input:  'results/bed/{species}_3UTR.bed'
        output: 'results/targets/{species}.utr.lengths.tsv'
        script: 'get_utr_lengths.R'

rule get_air_file_no_reannotation:
	input: "results/targets/{species}_chr{chrom}.utr.lengths.tsv"
	output: 'results/targets/{species}_nr_chr{chrom}.AIRs.txt'
	script: 'get_canonical_AIR.R'

rule aggregate_chromosomal_AIR_files:
        input: lambda wildcards: expand("results/targets/{species}_chr{chrom}.utr.lengths.tsv", chrom=config['chromosomes'][wildcards.species], species=wildcards.species)
        output: 'results/targets/{species}_nr.AIRs.txt'
        script: 'get_canonical_AIR.R'

###

rule split_bed6:
        input: "results/bed/{species}_3UTR.bed"
        output: "results/bed/{species}_3UTR.chr{chrom}.bed"
        shell: 'grep -E "^{wildcards.chrom}\s" {input} > {output}'

rule filter_bed6_file_no_reannotation:
        input: "results/bed/{species}_{feature}.bed"
        output: "results/bed/{species}_nr_{feature}.bed"
        script: 'filter_bed6.R'

rule split_filtered_bed6:
	input: rules.filter_bed6_file_no_reannotation.output
	output: "results/bed/{species}_{feature}.chr{chrom}.nr.bed"
	shell: 'grep -E "^{wildcards.chrom}\s" {input} > {output} || true'


## get_utr_and_cds & targetscan sites

#rule biopython_get_msa_nr:
#        input:
#           maf="data/maf_{species}/chr{chrom}.maf",
#           bed="results/bed/{species}_{feature}.chr{chrom}.nr.bed",
#           maf_index="data/{species}_chr{chrom}.mafindex"
#        output:
#           "results/msa/{species}_chr{chrom}_{feature}_msa_nr.tsv"
#        conda:
#           "envs/biopython.yaml"
#        script:
#           "biopython_maf_processing2.py"

### get_utr_and_cds without_conservation


def get_dna_file(wildcards):
        sci_species_name = config['sci_species_name'][wildcards.species]
        genome_build = config['genome_build'][wildcards.species]

        return('data/' + sci_species_name + '.' + genome_build + '.dna.chromosome.{}.fa'.format(wildcards.chrom))

def get_NCBI_taxonomic_id(wildcards):
        return(config['tax_ids'][wildcards.species])

rule reformat_bed_file_for_bedtools_nr:
        input: "results/bed/{species}_{feature}.chr{chrom}.nr.bed"
        output: "results/bed/{species}_{feature}.chr{chrom}.bedtools.nr.bed"
        shell: "exe/get_bedtools_bed.sh {input} {output}"

rule get_single_species_seq_fa_nr:
        input:
                dna=get_dna_file,
                bed="results/bed/{species}_{feature}.chr{chrom}.bedtools.nr.bed"
        output: "results/msa/{species}_chr{chrom}_{feature}.tmp.nr.fa"
        conda: 'envs/bedtools.yaml'
        shell: "bedtools getfasta -name -s -fi {input.dna} -bed {input.bed} -fo {output}"

rule merge_fasta_nr:
        input: "results/msa/{species}_chr{chrom}_{feature}.tmp.nr.fa"
        output: "results/msa/{species}_chr{chrom}_{feature}.tmp2.nr.fa"
        script: "merge_fasta.R"

rule convert_fasta_to_tsv_nr:
        input: "results/msa/{species}_chr{chrom}_{feature}.tmp2.nr.fa"
        output: "results/msa/{species}_chr{chrom}_{feature}_msa_nr.tsv"
        params: get_NCBI_taxonomic_id
        shell: "exe/convert_fa_to_tsv2.sh {input} {params} {output}"

####

#rule aggregate_utrs:
#	input: lambda wildcards: expand("results/msa/{species}_chr{chrom}_3UTR_msa_nr.tsv", species=wildcards.species, chrom=config['chromosomes'][wildcards.species])
#	output: "results/msa/{species}_3UTR_msa_nr.tsv"
#	shell: "cat {input} > {output}"

#rule get_utr_lengths2:
#	input: "results/msa/{species}_3UTR_msa_nr.tsv"
#	output: "results/msa/{species}_3UTR_msa_nr_lengths.tsv"
#	script: 'get_seq_lengths.R'	

###

rule targetscan_sites_nr:
        input:
           msa="results/msa/{species}_chr{chrom}_3UTR_msa_nr.tsv",
           mirna_families="results/{species}_{miRNA}_mirna_family.tsv",
           script="exe/targetscan7/targetscan_70.patch.pl"
        output:
           "results/targets/{species}_chr{chrom}_msa_{miRNA}.sites_nr.tmp.tsv"
#        benchmark:
#           "benchmarks/{species}_chr{chrom}_msa.sites.log"
        shell:
           "{input.script} {input.mirna_families} {input.msa} {output}"

rule fix_targetscan_sites_output_nr:
        input: rules.targetscan_sites_nr.output
        output: protected("results/targets/{species}_chr{chrom}_msa_nr_{miRNA}.sites.tsv")
        script: "fix_ts_output.R"

rule aggregate_targetscan_sites_nr:
        input: lambda wildcards: expand("results/targets/{species}_chr{chrom}_msa_nr_{miRNA}.sites.tsv", chrom=config['chromosomes'][wildcards.species], species=wildcards.species, miRNA=wildcards.miRNA)
        output: "results/targets/{species}_msa_nr_{miRNA}.sites.tsv"
        shell: "cat {input} | sed '1b;/Gene/d' > {output}"
