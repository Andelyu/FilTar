#!/bin/bash

def get_bed_file(wildcards):
	sci_species_name = config['sci_species_name'][wildcards.species]
        genome_build = config['genome_build'][wildcards.species]
	
	return('results/' + sci_species_name + '.' + genome_build + '_chr{}.{}.filtered.bed'.format(wildcards.chrom, config['ensembl_release']))	

# derived from https://gist.github.com/gireeshkbogu/f478ad8495dca56545746cd391615b93

rule modify_gtf_file: # remove 'chr' prefix if it exists in the gtf file - remove contigs and mitochondrial records
	input: "data/{species_prefix}.{ensembl_release}.chr.gtf"
	output: "data/{species_prefix}.{ensembl_release}.mod.chr.gtf"
	shell: "sed -r 's/^MT//g' {input} | sed '/^\t/d'  > {output}" # delete mitochondiral records and records not assigned to a chromosome

rule convert_gtf_to_genepred:
     input:
         gtf="data/{species_prefix}.{ensembl_release}.mod.chr.gtf"
     output:
         "results/{species_prefix}.{ensembl_release}.genePred"
     conda: "envs/ucsc.yaml"
     shell:
         "gtfToGenePred {input.gtf} {output}"

rule convert_genepred_to_bed12:
     input:
         genepred="results/{species_prefix}.{ensembl_release}.genePred"
     output:
         "results/{species_prefix}.{ensembl_release}.bed"
     wildcard_constraints:
               species_prefix="((?!chr).)*" # anything not containing chr
     conda: "envs/ucsc.yaml"
     shell:
         "genePredToBed {input.genepred} {output}"

rule get_bedgraph:
    input:
        sorted_bam="results/bam/run/{species}/{accession}.bam.sorted",
    output:
        "results/bam/run/{species}/{accession}.bedgraph"
    conda:
        "envs/bedtools.yaml"
    wildcard_constraints:
               accession="((?!_chr).)*"
    benchmark:
        "benchmarks/genomeCoverageBed/{species}/{accession}.txt"
    shell:
        "genomeCoverageBed -bg -ibam {input.sorted_bam} -split > {output}"

rule split_bedgraph:
        input: 'results/bam/run/{species}/{accession}.bedgraph'
        output: 'results/bam/run/{species}/{accession}_chr{chrom}.bedgraph'
        shell: 'grep -E "^{wildcards.chrom}\s" {input} > {output}'

rule merge_bedgraphs_by_run:
        input:
             lambda wildcards: expand("results/bam/run/{species}/{accession}_chr{chrom}.bedgraph", species=wildcards.species, accession=config['samples'][wildcards.sample], chrom=wildcards.chrom)
        output:
             temp("results/bam/sample/{species}/{sample}_chr{chrom}_tmp.bedgraph")
        wildcard_constraints:
             sample="[E|D|S]RS.*"
        conda:
             "envs/bedtools.yaml"
        script: "merge_bedgraphs.py"

rule avg_merged_bedgraph_by_run:
        input:
                "results/bam/sample/{species}/{sample}_chr{chrom}_tmp.bedgraph"
        output:
                temp("results/bam/sample/{species}/{sample}_chr{chrom}.bedgraph")
        wildcard_constraints:
             sample="[E|D|S]RS[0-9X]+"
        script:
                "get_average_bedgraph.R"

rule merge_bedgraphs_by_sample:
        input:
             lambda wildcards: expand("results/bam/sample/{species}/{sample}_chr{chrom}.bedgraph", species=wildcards.species, sample=config['tissues'][wildcards.species][wildcards.cell_line], chrom=wildcards.chrom)
        output:
             "results/bam/tissue/{species}/{cell_line}_chr{chrom}.bedgraph.tmp"
        wildcard_constraints:
               cell_line="((?!chr).)*" # anything not containing chr
        conda:
             "envs/bedtools.yaml"
        script: "merge_bedgraphs.py"

rule avg_merged_bedgraph_by_sample:
        input:
                "results/bam/tissue/{species}/{cell_line}_chr{chrom}.bedgraph.tmp"
        output:
                "results/bam/tissue/{species}/{cell_line}_chr{chrom}.bedgraph"
        wildcard_constraints:
               cell_line="((?!chr).)*" # anything not containing chr
        script:
                "get_average_bedgraph.R"

rule split_bed12:
        input: 'results/{species_prefix}.{ensembl_release}.bed'
        output:'results/{species_prefix}_chr{chrom}.{ensembl_release}.bed'
        shell: 'grep -E "^{wildcards.chrom}\s" {input} > {output}'

rule reannotate_3utrs:
    input:
       script="exe/identifyDistal3UTR.pl",
       bed=get_bed_file,
       bedgraphs= 'results/bam/tissue/{species}/{cell_line}_chr{chrom}.bedgraph'
    benchmark: "benchmarks/APAtrap/{species}_{cell_line}_chrom{chrom}.log"
    output:
       "results/bed/{species}_{cell_line}_chr{chrom}.utr.bed"
    shell:
       "{input.script} -i {input.bedgraphs} -m {input.bed} -o {output}"

#rule aggregate_reannotated_utrs:
#	input: lambda wildcards: expand("results/bed/{species}_{tissue}_chr{chrom}.utr.bed", chrom=config['chromosomes'][wildcards.species], species=wildcards.species, tissue=wildcards.tissue)
#	output: protected("results/bed/{species}_{tissue}.utr.bed")
#        shell: "cat {input} > {output}"

rule identify_APA_sites:
     input:
        script="exe/predictAPA.pl",
        bedgraphs= "results/bam/tissue/{species}/{tissue}_chr{chrom}.bedgraph",
        bed="results/bed/{species}_{tissue}_chr{chrom}.utr.bed"
     output:
        "results/targets/{species}_{tissue}_chr{chrom}.APA.txt"
     shell:
        "{input.script} -i {input.bedgraphs} -g 1 -n 1 -u {input.bed}  -o {output}"

rule aggregate_APA_sites:
        input: lambda wildcards: expand("results/targets/{species}_{tissue}_chr{chrom}.APA.txt", chrom=config['chromosomes'][wildcards.species], species=wildcards.species, tissue=wildcards.tissue)
        output: protected("results/targets/{species}_{tissue}.APA.txt")
        shell: "cat {input} | sed '1b;/Gene/d' > {output}"
