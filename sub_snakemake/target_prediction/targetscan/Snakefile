#!/bin/bash

### miRNA prep ###

rule prep_mirna_seeds:
        input:                      
           data="data/mature.fa",
           script="exe/get_mirna_seeds.sh"
        output:
           "results/mature_mirna_seed.tsv"
        shell:
           "{input.script} {input.data} > {output}"

rule prep_mirna_family_file:
        input:
           mature_mirna_seeds="results/mature_mirna_seed.tsv"
        output:
           "results/{species}_mirna_family.tsv",
        script:
           "get_mirna_family.R"

rule prep_mirna_mature_alt:
        input:
           data="data/mature.fa",
           script="exe/prep_mirna_mature_alt.sh"
        output:
           "results/{species}_mature_mirna.tsv"
        shell:
           "{input.script} {input.data} {wildcards.species} > {output}"

rule prep_mir_for_context_scores:
        input:
           mature_mirnas="results/{species}_mature_mirna.tsv",
           mirna_seed="results/mature_mirna_seed.tsv",
        output:
           "results/{species}_mir_for_context_scores.tsv"
        shell:
           "get_mirna_context.R"

### main ###

rule targetscan_sites:
	input:
           msa=ancient("results/{species}_chr{chrom}_msa.tsv"),
           mirna_families=ancient("results/{species}_mirna_family.tsv"),
           script="exe/targetscan7/targetscan_70.pl"
	output:
           "results/{species}_chr{chrom}_msa.sites.tsv"
	benchmark:
           "benchmarks/{species}_chr{chrom}_msa.sites.log"
	shell:
           "{input.script} {input.mirna_families} {input.msa} {output}"

rule targetscan_branch_lengths:
        input:
           msa_3UTR=ancient("results/{species}_chr{chrom}_msa.tsv"),
           script="exe/targetscan7/targetscan_70_BL_bins.patch.pl"
        output:
             "results/{species}_chr{chrom}_msa.branch_lengths.tsv"
        benchmark:
             "benchmarks/branch_lengths_{species}_chr{chrom}.log"
        shell:
            "{input.script} {input.msa_3UTR} {wildcards.species}  > {output}"

rule targetscan_PCTs:
        input:
            mirna_family="results/mirna_family.tsv",
            mirna_sites="results/{species}_chr{chrom}_msa.sites.tsv",
            branch_lengths="results/{species}_chr{chrom}_msa.branch_lengths.tsv",
            script="exe/targetscan7/targetscan_70_BL_PCT.patch.pl",
            PCT_param="exe/targetscan7/PCT_parameters"
        output:
            "results/{species}_chr{chrom}_msa.PCTs.tsv"
        benchmark:
            "benchmarks/{species}_chr{chrom}_msa.PCTs.log"
        shell:
            "{input.script} {input.mirna_family} {input.mirna_sites} {input.branch_lengths} > {output}"

rule targetscan_eightmers:
        input:
            mirna_seeds="results/mirna_family.tsv",
            CDS_3UTRs="results/{species}_CDS_chr{chrom}.tsv",
            script="exe/targetscan7/targetscan_count_8mers.pl"
        output:
            eightmer_counts="results/{species}_chr{chrom}_msa.eightmers.tsv",
            CDS_lengths="results/{species}_CDS_chr{chrom}.tsv.lengths.txt"
        shell:
            "{input.script} {input.mirna_seeds} {input.CDS_3UTRs} > {output.eightmer_counts}"

rule targetscan_context_scores:
        input:
            mirnas="results/{species}_mir_for_context_scores.tsv",
            msa="results/{species}_chr{chrom}_msa.tsv",
            PCTs="results/{species}_chr{chrom}_msa.PCTs.tsv",
            CDS_lengths="results/{species}_CDS_chr{chrom}.tsv.lengths.txt",
            eightmer_counts="results/{species}_chr{chrom}_msa.eightmers.tsv",
            contextpp_script="exe/targetscan7/targetscan_70_context_scores.patch.pl",
            agarwal_param="exe/targetscan7/Agarwal_2015_parameters.txt",
            AIRs="exe/targetscan7/All_cell_lines.AIRs.txt",
            TA_SPS_param="exe/targetscan7/TA_SPS_by_seed_region.txt",
            script="exe/targetscan7/targetscan_70_context_scores.patch.pl"
        output:
            "results/{species}_chr{chrom}_msa.contextpp.tsv"
        benchmark:
            "benchmarks/{species}_chr{chrom}_msa.contextpp.log"
        shell:
            "{input.script} {input.mirnas} {input.msa} {input.PCTs} {input.CDS_lengths} {input.eightmer_counts} {output} species['{wildcards.species}']"

### other ###

rule get_AIR_file:
        input: "{tissue}.APA.txt" #output from APA usage file
        output: "exe/targetscan7/{tissue}.AIRs.txt"
        script: "get_tissue_specific_APA_file.R"

rule patch_bin_lengths_script:
        input:
           BL_bins="exe/targetscan7/targetscan_70_BL_bins.pl",
           patch="exe/targetscan7/patch_branch_lengths.sh"
        output:
          "exe/targetscan7/targetscan_70_BL_bins.patch.pl"
        shell:
          "{input.patch} {input.BL_bins} > {output}" # force reference species as a parameter

rule patch_PCT_script:
        input:
           "exe/targetscan7/targetscan_70_BL_PCT.pl"
        output:
          "exe/targetscan7/targetscan_70_BL_PCT.patch.pl"
        shell:
          "sed -e '55 s;PCT_param;exe\/targetscan7\/PCT_param;g' {input} > {output}" # force reference species as a parameter

rule patch_contextpp_script:
        input:
           contextpp="exe/targetscan7/targetscan_70_context_scores.pl",
           patch="exe/targetscan7/patch_context_scores.sh"
        output:
          "exe/targetscan7/targetscan_70_context_scores.patch.pl"
        shell:
          "{input.patch} {input.contextpp} > {output}" # force reference species as a parameter

rule aggregate_targetscan_sites:
	input: lambda wildcards: expand("results/{species}_chr{chrom}_msa.sites.tsv", chrom=config['chromosomes'][wildcards.species])
  	output: "results/{species}_msa.sites.tsv"
	shell: "cat {input} | sed '1b;/Gene/d' > {output}"



