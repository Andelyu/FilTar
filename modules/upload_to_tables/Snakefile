def get_tax_id(wildcards):
        return(config['tax_ids'][wildcards.species])

def get_gtf_file(wildcards):
        sci_species_name = config['sci_species_name'][wildcards.species]
        genome_build = config['genome_build'][wildcards.species]

        return ( 'data/' + sci_species_name + '.' + genome_build + '.{}.mod.chr.gtf'.format(config['ensembl_release'])  )

def get_cDNA_file (wildcards):
        sci_species_name = config['sci_species_name'][wildcards.species]
        genome_build = config['genome_build'][wildcards.species]

        return ( 'data/' + sci_species_name + '.' + genome_build + '.cdna.all.fa'  )

rule pre_mRNA_for_loading:
	input: 
           data=get_gtf_file,
           script="scripts/prepare_mRNA_for_loading.sh"
	output: "results/{species}_mRNA_to_be_loaded.tsv"
	shell: "{input.script} {input.data} > {output}"

rule prep_for_gene_loading:
	input:
           data=get_gtf_file,
           script="modules/upload_to_tables/prepare_gene_for_loading.sh"
	output: "results/{species}_gene_to_be_loaded.tsv"
	shell: "{input.script} {input.data} > {output}"

rule extract_tx_and_gene_IDs:
        input: get_cDNA_file
        output:
           "results/tx_and_gene_IDs_{species}.txt"
        shell: "scripts/extract_tx_gene_and_ids.sh {input} > {output}"

rule extract_unique_gene_names:
       input:
          "results/tx_and_gene_IDs_{species}.txt"
       output:
          "results/gene_names_unique_{species}.txt"
       shell:
          "awk '{{print $2}}' {input} | uniq > {output}"

rule prep_mirnas_for_loading_prologue:
	input: "data/mature_high_conf.fa"
	output: "results/{species}_mature_mirna_for_loading.tsv"
	params: get_tax_id
	shell: "grep {wildcards.species} {input} | sed 's/>//g' | awk '{{print $1}}' | awk -v params={params} '{{ print $1,params }}' | tr ' ' '\t'  > {output}"


#rule prep_mirnas_for_loading:
#        input:
#            mirnas="results/{species}_mature_mirna_for_loading.tsv",
#            script="scripts/prep_mirs_for_loading.sh"
#        output: "results/{species}_mature_mirna_for_db.tsv"
#        shell: "{input.script} {input.mirnas} > {output}"

#rule get_all_utr_lengths:
#        input:  "results/{tissue}.utr.full.bed"
#        output: "results/{tissue}.utr.full.tsv"
#        script: "get_utr_lengths.R"
