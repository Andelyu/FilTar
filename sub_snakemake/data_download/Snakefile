#!/bin/bash


def get_species_synonym(wildcards):
        if wildcards.species_prefix == 'Mus_musculus.GRCm38':
                return ('mus_musculus')
        elif wildcards.species_prefix == 'Homo_sapiens.GRCh38':
                return ('homo_sapiens')

def get_species(wildcards):
	return(wildcards.genus_species.lower())

def get_gtf_file(wildcards):
        sci_species_name = config['sci_species_name'][wildcards.species]
        genome_build = config['genome_build'][wildcards.species]

        return ( 'data/' + sci_species_name + '.' + genome_build + '.{}.mod.chr.gtf'.format(config['ensembl_release'])  )

#rule download_mirna_data:
#       input:
#       output:
#          "data/mature.fa"
#       shell:
#          "wget --directory-prefix=data/ ftp://mirbase.org/pub/mirbase/CURRENT/mature.fa.gz && gunzip {output}"

### GTF

rule get_gtf_file:
     output: "data/{genus_species}.{build}.{ensembl_release}.chr.gtf"
     params: get_species
     shell: "rsync -av rsync://ftp.ensembl.org/ensembl/pub/release-{config[ensembl_release]}/gtf/{params}/{wildcards.genus_species}.{wildcards.build}.{config[ensembl_release]}.chr.gtf.gz data/ && gunzip data/{wildcards.genus_species}.{wildcards.build}.{config[ensembl_release]}.chr.gtf.gz && sed 's/^chr//g' data/{wildcards.genus_species}.{wildcards.build}.{config[ensembl_release]}.chr.gtf > tmp && mv tmp data/{wildcards.genus_species}.{wildcards.build}.{config[ensembl_release]}.chr.gtf"

rule modify_gtf_file: # remove 'chr' prefix if it exists in the gtf file - remove contigs and mitochondrial records
        input: "data/{species_prefix}.{ensembl_release}.chr.gtf"
        output: "data/{species_prefix}.{ensembl_release}.mod.chr.gtf"
        shell: "sed -r 's/^MT//g' {input} | sed '/^\t/d'  > {output}" # delete mitochondiral records and records not assigned to a chromosome

rule get_transcript_ids:
        input:
                gtf=get_gtf_file
        output: "results/bed/{species}_chr{chrom}_all_transcripts.txt"
        shell: "exe/get_all_transcripts.sh {input} {wildcards.chrom} > {output}"

# Genome assemblies

rule download_toplevel_dna:
	output: "data/{genus_species}.{build}.dna.toplevel.fa.gz"
	params: get_species
	shell: "rsync -av rsync://ftp.ensembl.org/ensembl/pub/release-{config[ensembl_release]}/fasta/{params}/dna/{wildcards.genus_species}.{wildcards.build}.dna.toplevel.fa.gz data/"

rule download_primary_assembly_dna:
        output: "data/{genus_species}.{build}.dna.primary_assembly.fa.gz"
        params: get_species
        shell: "rsync -av rsync://ftp.ensembl.org/ensembl/pub/release-{config[ensembl_release]}/fasta/{params}/dna/{wildcards.genus_species}.{wildcards.build}.dna.primary_assembly.fa.gz data/"

rule download_chromsomal_dna:
        input:
        output: "data/{genus_species}.{build}.dna.chromosome.{chrom}.fa.gz"
        params: get_species
        shell: "rsync -av rsync://ftp.ensembl.org/ensembl/pub/release-{config[ensembl_release]}/fasta/{params}/dna/{wildcards.genus_species}.{wildcards.build}.dna.chromosome.{wildcards.chrom}.fa.gz data/"

rule decompress_dna_file:
        input: "data/{species_prefix}.dna.{assembly_level}.fa.gz"
        output: "data/{species_prefix}.dna.{assembly_level}.fa"
        conda: "envs/pigz.yaml"
        threads: 8
        shell: "pigz -p {threads} -d {input}"

rule download_maf_files_human:
        input:
        output:
           protected("data/maf_hsa/chr{chrom}.maf")
        shell:
           "wget --directory-prefix=data/maf_hsa/ -nv http://hgdownload.soe.ucsc.edu/goldenPath/hg38/multiz100way/maf/chr{wildcards.chrom}.maf.gz && gunzip {output}.gz"

rule download_maf_files_mouse:
        input:
        output:
           protected("data/maf_mmu/chr{chrom}.maf")
        shell:
           "wget --directory-prefix=data/maf_mmu/ -nv http://hgdownload.cse.ucsc.edu/goldenPath/mm10/multiz60way/maf/chr{wildcards.chrom}.maf.gz && gunzip {output}.gz"

rule index_maf_files:
        input:
           maf="data/maf_{species}/chr{chrom}.maf",
        output:
           protected("data/{species}_chr{chrom}.mafindex")
        conda: 'envs/biopython.yaml'
        benchmark:
           "benchmarks/{species}_chr{chrom}.mafindex.log"
        script:
           "biopython_maf_processing.py"

rule download_targetscan_data1:
        input:
        output:
            "exe/targetscan7/targetscan_70.pl"
        shell:
            "cd exe/targetscan7 && wget http://www.targetscan.org/vert_72/vert_72_data_download/targetscan_70.zip && unzip targetscan_70.zip && rm UTR_Sequences_sample.txt miR_Family_info_sample.txt\
 targetscan_70_output.txt README_70.txt targetscan_70.zip"

rule download_targetscan_data2:
        input:
        output:
            bins_script="exe/targetscan7/targetscan_70_BL_bins.pl",
            PCT_script="exe/targetscan7/targetscan_70_BL_PCT.pl",
            PCT_parameters="exe/targetscan7/PCT_parameters"
        shell:
            "wget http://www.targetscan.org/vert_72/vert_72_data_download/targetscan_70_BL_PCT.zip && unzip targetscan_70_BL_PCT.zip && mv\
  TargetScan7_BL_PCT/PCT_parameters TargetScan7_BL_PCT/targetscan_70_BL_bins.pl TargetScan7_BL_PCT/targetscan_70_BL_PCT.pl exe/targetscan7 && rm -rf targetscan_70_BL_PCT.zip TargetScan7_BL_PCT/"

rule download_targetscan_data3: # fix this
         input:
         output:
             agarwal_par="exe/targetscan7/Agarwal_2015_parameters.txt",
             contextpp_script="exe/targetscan7/targetscan_70_context_scores.pl",
             eightmer_script="exe/targetscan7/targetscan_count_8mers.pl",
             TA_pars="exe/targetscan7/TA_SPS_by_seed_region.txt"
         shell:
           "wget http://www.targetscan.org/vert_72/vert_72_data_download/TargetScan7_context_scores.zip && unzip TargetScan7_context_scores.zip && mv TargetScan7_context_scores/Agarwal_2015_parameters.txt TargetScan7_context_scores/TA_SPS_by_seed_region.txt TargetScan7_context_scores/targetscan_count_8mers.pl TargetScan7_context_scores/targetscan_70_context_scores.pl exe/targetscan7/ && rm -rf TargetScan7_context_scores/ TargetScan7_context_scores.zip"

rule download_targetscan_data4:
        input:
        output:
         "exe/targetscan7/All_cell_lines.AIRs.txt"
        shell:
         "wget http://www.targetscan.org/vert_72/vert_72_data_download/3Pseq_tags_AIRs.zip && unzip 3Pseq_tags_AIRs.zip && mv All_cell_lines.AIRs.txt exe/targetscan7/ && rm -rf README.txt 3Pseq_tags_AIRs.zip All_cell_lines.tags.bed All_cell_lines.tags+pseudocounts.bed"

rule download_cdna_file:
        output: "data/{genus_species}.{build}.cdna.all.fa.gz"
        params: get_species
        shell: "rsync -av rsync://ftp.ensembl.org/ensembl/pub/release-{config[ensembl_release]}/fasta/{params}/cdna/{wildcards.genus_species}.{wildcards.build}.cdna.all.fa.gz data"

rule decompress_cdna_file:
        input: "data/{species_prefix}.cdna.all.fa.gz"
        output: "data/{species_prefix}.cdna.all.fa"
        shell: "gunzip {input}"
