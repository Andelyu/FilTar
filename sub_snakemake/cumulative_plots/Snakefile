rule get_utr_lengths2:
	input:	'results/bed/{species}_{cell_line}.utr.full.bed'
	output: 'results/utrs/{species}_{cell_line}.utr.lengths.tsv'
	script: 'get_utr_lengths.R'

rule get_utr_lengths_canonical:
        input:  'results/bed/canonical/{species}_3UTR.chr{chrom}.bed'
        output: 'results/targets/canonical/{species}_chr{chrom}.utr.lengths.tsv'
        script: 'get_utr_lengths.R'

rule aggregate_utr_lengths:
       input: lambda wildcards: expand("results/targets/canonical/{species}_chr{chrom}.utr.lengths.tsv", chrom=config['chromosomes'][wildcards.species], species=wildcards.species)
       output: "results/targets/canonical/{species}.utr.lengths.tsv"
       shell: "cat {input} | sed '1b;/tx/d' > {output}"


#rule get_cell_line_targets:
#	input:
#		targets='results/{species}_msa_sites.tsv',
#		utr_lens='results/utrs/{species}_{cell_line}.utr.lengths.tsv'
#	output: 'results/targets/specific/{species}_{cell_line}.sites.tsv'
#	script: 'alt_sites.R'

#rule get_canon_targets: # we do it this way, as inheriting from main workflow would trigger execution of targetscan job for ALL miRNAs, instead of a few miRNAs, taking a much longer time
#	input:          # Maybe it is just easier to create the canonical target set by creating a dummy tissue called 'canonical'? in which case we will not need extra rules
#           msa="results/msa/canonical/{species}_chr{chrom}_3UTR_msa.tsv",
#           mirna_families="results/{species}_mirna_family.tsv",
#           script="exe/targetscan7/targetscan_70.pl"
#	output: "results/targets/canonical/{species}_chr{chrom}_msa.sites.tsv"
#	shell: '{input.script} {input.mirna_families} {input.msa} {output}'

#rule aggregate_canon_targets:
#	input: lambda wildcards: expand("results/targets/canonical/{species}_chr{chrom}_msa.sites.tsv", chrom=config['chromosomes'][wildcards.species], species=wildcards.species)
#	output: "results/targets/canonical/{species}_msa.sites.tsv"
#	shell: "cat {input} | sed '1b;/Gene/d'  > {output}"

rule get_cumulative_plot_expression:
        input:
                quant_mock= lambda wildcards: expand("results/kallisto/{Run}/abundance.tsv", Run=config[wildcards.project][wildcards.cell_line]['mock']),
                quant_real= lambda wildcards: expand("results/kallisto/{Run}/abundance.tsv", Run=config[wildcards.project][wildcards.cell_line][wildcards.miRNA]),
                canon_targets = "results/targets/{species}_msa_nr.sites.tsv",
                miRNA_dict = "results/{species}_mir_for_context_scores.tsv",
                pc_transcripts="results/bed/{species}_all_protein_coding_transcripts.txt"
        params:
                nontarget_site_types= ['8mer-1a','7mer-m8','7mer-1a','6mer'],
                target_site_types = ['8mer-1a','7mer-m8','7mer-1a','6mer'],
                exp_threshold=0.1,
                x_lim=2.00
        output: "results/plots/{species}_{project}_{miRNA}_{cell_line}_exp.rds"
        script: "alt_utrs_deseq_exp.R"

#rule get_cumulative_plot_expression_salmon:
#        input:
#                quant_mock= lambda wildcards: expand("results/kallisto/{Run}/abundance.tsv", Run=config[wildcards.project][wildcards.cell_line]['mock']),
#                quant_real= lambda wildcards: expand("results/kallisto/{Run}/abundance.tsv", Run=config[wildcards.project][wildcards.cell_line][wildcards.miRNA]),
#                canon_targets = "results/targets/{species}_msa_nr.sites.tsv",
#                miRNA_dict = "results/{species}_mir_for_context_scores.tsv"
#        params:
#                nontarget_site_types= ['8mer-1a','7mer-m8','7mer-1a','6mer'],
#                target_site_types = ['8mer-1a','7mer-m8','7mer-1a','6mer'],
#                exp_threshold=30,
#                x_lim=2.0
#        output: "results/plots/{species}_{project}_{miRNA}_{cell_line}_exp_salmon.png"
#        script: "alt_utrs_deseq_exp.R"

rule get_cumulative_plot_alt_utrs: # UTR reannotation analysis
        input:
                quant_mock= lambda wildcards: expand("results/kallisto/{Run}/abundance.tsv", Run=config[wildcards.project][wildcards.cell_line]['mock']),
                quant_real= lambda wildcards: expand("results/kallisto/{Run}/abundance.tsv", Run=config[wildcards.project][wildcards.cell_line][wildcards.miRNA]),
                cl_targets= "results/targets/{species}_{cell_line}_msa.sites.tsv",
                canon_targets ="results/targets/{species}_msa_nr.sites.tsv",
                miRNA_dict= "results/{species}_mir_for_context_scores.tsv",
                pc_transcripts="results/bed/{species}_all_protein_coding_transcripts.txt"
        params:
                nontarget_site_types= ['8mer-1a','7mer-m8','7mer-1a','6mer'],
                target_site_types = ['8mer-1a','7mer-m8','7mer-1a','6mer'],
                exp_threshold=0,
                x_lim=1.2
        threads: 20
        output: "results/plots/{species}_{project}_{miRNA}_{cell_line}_alt_utr.rds"
        script: "alt_utrs_deseq.R"

rule get_cumulative_plot_alt_utrs_old_targets: # UTR reannotation analysis
        input:
                quant_mock= lambda wildcards: expand("results/kallisto/{Run}/abundance.tsv", Run=config[wildcards.project][wildcards.cell_line]['mock']),
                quant_real= lambda wildcards: expand("results/kallisto/{Run}/abundance.tsv", Run=config[wildcards.project][wildcards.cell_line][wildcards.miRNA]),
                cl_targets= "results/targets/{species}_{cell_line}_msa.sites.tsv",
                canon_targets ="results/targets/{species}_msa_nr.sites.tsv",
                miRNA_dict= "results/{species}_mir_for_context_scores.tsv",
                pc_transcripts="results/bed/{species}_all_protein_coding_transcripts.txt"
        params:
                nontarget_site_types= ['8mer-1a','7mer-m8','7mer-1a','6mer'],
                target_site_types = ['8mer-1a','7mer-m8','7mer-1a','6mer'],
                exp_threshold=0,
                x_lim=1.50
	threads: 20
        output: "results/plots/{species}_{project}_{miRNA}_{cell_line}_alt_utr_old.rds"
        script: "alt_utrs_deseq_old_targets.R"

rule get_cumulative_plot_alt_utrs_old_targets_no_filt: # UTR reannotation analysis
        input:
                quant_mock= lambda wildcards: expand("results/kallisto/{Run}/abundance.tsv", Run=config[wildcards.project][wildcards.cell_line]['mock']),
                quant_real= lambda wildcards: expand("results/kallisto/{Run}/abundance.tsv", Run=config[wildcards.project][wildcards.cell_line][wildcards.miRNA]),
                cl_targets= "results/targets/{species}_{cell_line}_msa.sites.tsv",
                canon_targets ="results/targets/{species}_msa_nr.sites.tsv",
                miRNA_dict= "results/{species}_mir_for_context_scores.tsv",
                pc_transcripts="results/bed/{species}_all_protein_coding_transcripts.txt"
        params:
                nontarget_site_types= ['8mer-1a','7mer-m8','7mer-1a','6mer'],
                target_site_types = ['8mer-1a','7mer-m8','7mer-1a','6mer'],
                exp_threshold=0,
                x_lim=1.20
        threads: 20
        output: "results/plots/{species}_{project}_{miRNA}_{cell_line}_alt_utr_old_no_filt.rds"
        script: "alt_utrs_deseq_old_targets_no_filt.R"



rule get_cumulative_plot_alt_utrs_sup_fig: # UTR reannotation analysis
        input:
                quant_mock= lambda wildcards: expand("results/kallisto/{Run}/abundance.tsv", Run=config[wildcards.project][wildcards.cell_line]['mock']),
                quant_real= lambda wildcards: expand("results/kallisto/{Run}/abundance.tsv", Run=config[wildcards.project][wildcards.cell_line][wildcards.miRNA]),
                cl_targets= "results/targets/{species}_{cell_line}_msa.sites.tsv",
                canon_targets ="results/targets/{species}_msa_nr.sites.tsv",
                miRNA_dict= "results/{species}_mir_for_context_scores.tsv",
                pc_transcripts="results/bed/{species}_all_protein_coding_transcripts.txt"
        params:
                nontarget_site_types= ['8mer-1a','7mer-m8','7mer-1a','6mer'],
                target_site_types = ['8mer-1a','7mer-m8','7mer-1a','6mer'],
                exp_threshold=0,
                x_lim=2.2
	threads: 20
        output: "results/plots/{species}_{project}_{miRNA}_{cell_line}_alt_utr_sup_fig.rds"
        script: "alt_utrs_deseq_sup_fig.R"



#rule get_cumulative_plot_alt_utrs_salmon: # UTR reannotation analysis
#        input:
#                quant_mock= lambda wildcards: expand("results/salmon/runs/hsa/{run_accession}", run_accession=config[wildcards.project][wildcards.cell_line]['mock']),
#                quant_real= lambda wildcards: expand("results/salmon/runs/hsa/{run_accession}", run_accession=config[wildcards.project][wildcards.cell_line][wildcards.miRNA]),
#                cl_targets= "results/targets/{species}_{cell_line}_msa.sites.tsv",
#                canon_targets ="results/targets/{species}_msa_nr.sites.tsv",
#                miRNA_dict= "results/{species}_mir_for_context_scores.tsv"
#        params:
#                nontarget_site_types= ['8mer-1a','7mer-m8','7mer-1a','6mer'],
#                target_site_types = ['8mer-1a','7mer-m8','7mer-1a','6mer'],
#                exp_threshold=0,
#                x_lim=2.0
#        output: "results/plots/{species}_{project}_{miRNA}_{cell_line}_alt_utr_salmon.png"
#        script: "alt_utrs_deseq_salmon.R"

#rule sleuth:
#        input: 
#                quant_mock = lambda wildcards: expand("results/kallisto/{run_accession}/abundance.tsv", run_accession=config[wildcards.project][wildcards.cell_line]['mock']),
#                quant_real = lambda wildcards: expand("results/kallisto/{run_accession}/abundance.tsv", run_accession=config[wildcards.project][wildcards.cell_line][wildcards.miRNA]),
#                cl_targets= "results/targets/{species}_{cell_line}_msa.sites.tsv",
#                canon_targets ="results/targets/{species}_msa_nr.sites.tsv",
#                miRNA_dict= "results/{species}_mir_for_context_scores.tsv"
#        params:
#                nontarget_site_types= ['8mer-1a','7mer-m8','7mer-1a','6mer'],
#                target_site_types = ['8mer-1a','7mer-m8','7mer-1a'], #'6mer'],
#                exp_threshold=0,
#                x_lim=1.0
#        output: "results/plots/{species}_{project}_{miRNA}_{cell_line}_alt_utr_sleuth.png"
#        script: "sleuth.R"


rule get_target_stats:
	input:
		tissue='results/targets/{species}_{tissue}_msa.sites.tsv',
                control='results/targets/{species}_msa_nr.sites.tsv',
		quant= lambda wildcards: expand("results/kallisto/{Run}/abundance.tsv", Run=config[wildcards.project][wildcards.tissue]['mock']),
                pc_transcripts='results/bed/{species}_all_protein_coding_transcripts.txt'
	output: "results/targets/{species}_{project}_{tissue}_stats.txt"
	wildcard_constraints:
		tissue="((?!SRR).)*",
                project="((?!ske).)*"
	script: 'get_stats.R'

rule get_reannotation_stats:
	input:
		canonical="results/targets/{species}.utr.lengths.tsv",
		new='results/utrs/{species}_{tissue}.utr.lengths.tsv',
                pc_transcripts='results/bed/{species}_all_protein_coding_transcripts.txt',
                quant= lambda wildcards: expand("results/kallisto/{Run}/abundance.tsv", Run=config[wildcards.project][wildcards.tissue]['mock'])
	output: 'results/utrs/{project}_{species}_{tissue}_stats.tsv'
        wildcard_constraints:
                project="((?!hsa).)*"
	script: "get_reannotation_stats.R"

rule get_expression_filtering_stats:
        input:
                canonical="results/targets/{species}.utr.lengths.tsv",
                pc_transcripts='results/bed/{species}_all_protein_coding_transcripts.txt',
                quant= lambda wildcards: expand("results/kallisto/{Run}/abundance.tsv", Run=config[wildcards.project][wildcards.tissue]['mock'])
        output: 'results/utrs/{project}_{species}_{tissue}_expression_stats.tsv'
        wildcard_constraints:
                project="((?!hsa).)*"
        script: "get_expression_stats.R"








