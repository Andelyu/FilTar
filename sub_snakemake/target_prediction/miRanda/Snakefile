#!/bin/bash

#rule miRanda:
#        input:
#            mature_mirnas="data/mirbase_mature_{species}.fa",
#            fasta_3UTR_merged="results/{species}_3UTR_chr{chrom}.fa.merged",
#            script="exe/miRanda.sh"
#        output:
#            "results/{species}_chr{chrom}.miranda_proc"
#        benchmark:
#             "benchmarks/{species}_chr{chrom}_miRanda.log"
#        shell:
#            "{input.script} --species {wildcards.species} --chromosome {wildcards.chrom}"

rule build_miRanda_table:
        input:
            script="exe/SQL/SQLite/create_miRanda_table.py",
            dependency_species="results/species_table_created.txt",
            dependency_mirna="results/mirnas_loaded.txt",
            dependency_mrna="results/mRNA_table_loaded_hsa.txt"
        output:
            "results/miRanda_created.txt"
        shell:
            "{input.script} {output}"

rule add_species_to_miRanda_files: # fix this at the point where we originally process the miRanda output - need a separation between data output and post-processing
	input: "results/{species}_chr{chrom}.miranda_proc"
	output: "results/{species}_chr{chrom}.miranda_proc2"
	shell: "exe/reformat_miRanda_output.sh {input} {output}" 

# if we decide to write data to the table in one big chunk instead
rule cat_miRanda_file:
	input: expand("results/hsa_chr{chrom}.miranda_proc2", chrom=config['chromosomes']['hsa']),
        output: "results/hsa.miranda_proc2"
	shell: "cat {input} > {output}"

# should not be run as a parallel job
rule load_in_miRanda_scores_SQLite:
	input:
           data="results/hsa_chr{chrom}.miranda_proc2",
           miRanda_table_created="results/miRanda_created.txt",
           script="sub_snakemake/target_prediction/miRanda/upload_to_table.py"
	output:
           "results/miRanda{chrom}_loaded.txt"
	params:
		table="miRanda",
		columns=["mirna_id","mrna_id","Species","score","UTR_START","UTR_END"]
	script:
           "upload_to_table.py"

#rule load_in_miRanda_scores:
#        input:
#           miRanda_results="results/{species}_chr{chrom}.miranda_proc",
#           script="exe/load_miRanda.sh"
#        output:
#           "results/{species}_chr{chrom}_loaded.miRanda.txt"
#        shell:
#           "{input.script} {input.miRanda_results} {wildcards.chrom} {wildcards.species}"
rule reformat_bed_file_for_bedtools:
        input: "results/bed/{species}_{tissue}_{feature}.chr{chrom}.bed"
        output: "results/bed/{species}_{tissue}_{feature}.chr{chrom}.bedtools.bed"
        shell: "exe/get_bedtools_bed.sh {input} {output}"

rule reformat_bed_file_for_bedtools_no_reannotation:
        input: "results/bed/no_reannotation/{species}_{feature}.chr{chrom}.filtered.bed"
        output: "results/bed/no_reannotation/{species}_{feature}.chr{chrom}.bedtools.bed"
        shell: "exe/get_bedtools_bed.sh {input} {output}"

rule get_single_species_seq_fa:
        input:
                dna=get_dna_file,
                bed="results/bed/mmu_liver_3UTR.chr{chrom}.bedtools.bed"
        output: "results/msa/{species}_{tissue}_chr{chrom}.tmp.fa"
        conda: 'envs/bedtools.yaml'
        shell: "bedtools getfasta -name -s -fi {input.dna} -bed {input.bed} -fo {output}"

rule get_single_species_seq_fa_no_reannotation:
        input:
                dna=get_dna_file,
                bed="results/bed/no_reannotation/{species}_3UTR.chr{chrom}.bedtools.bed"
        output: "results/msa/no_reannotation/{species}_chr{chrom}.tmp.fa"
        conda: 'envs/bedtools.yaml'
        shell: "bedtools getfasta -name -s -fi {input.dna} -bed {input.bed} -fo {output}"

rule fix_fasta_output:
	input: "results/msa/{species}_{tissue}_chr{chrom}.tmp.fa"
	output: "results/msa/{species}_{tissue}_chr{chrom}.fa"
	shell: "sed 's/(+)//g' {input} | sed 's/(-)//g' > {output}"

rule fix_fasta_output_no_reannotation:
	input: "results/msa/no_reannotation/{species}_chr{chrom}.tmp.fa"
	output: "results/msa/no_reannotation/{species}_chr{chrom}.fa"
	shell: "sed 's/(+)//g' {input} | sed 's/(-)//g' > {output}"

rule miRanda:
	input:
		utr="results/msa/{species}_{tissue}_chr{chrom}.fa",
		mirna="data/mirbase_mature_{species}.filtered.fa"
	output: "results/targets/miRanda/{species}/{tissue}_chr{chrom}.txt"
	conda: "envs/miRanda.yaml"
	shell: "miranda {input.mirna} {input.utr} > {output}"

rule miRanda_no_reannotation:
	input:
		utr="results/msa/no_reannotation/{species}_chr{chrom}.fa",
		mirna="data/mirbase_mature_{species}.filtered.fa"
	output: "results/targets/miRanda/{species}/chr{chrom}.txt"
	conda: "envs/miRanda.yaml"
	shell: "miranda {input.mirna} {input.utr} > {output}"
