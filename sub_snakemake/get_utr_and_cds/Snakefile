
def get_gtf_file(wildcards):
	if wildcards.species == 'hsa':
		return ('data/Homo_sapiens.GRCh38.92.gtf')
	elif wildcards.species == 'mmu':
		return ('data/Mus_musculus.GRCm38.92.gtf')

def get_dna_file(wildcards):
	if wildcards.species == 'hsa':
		return("data/Homo_sapiens.GRCh38.dna.chromosome.{}.fa".format(wildcards.chrom))
	if wildcards.species == 'mmu':
		return("data/Mus_musculus.GRCm38.dna.chromosome.{}.fa".format(wildcards.chrom))

### bedtools route

#rule gtf_to_bed_bedtools:
#	input:
#            gtf_file=get_gtf_file,
#            script="exe/pre-processing/gtf_to_bed.sh"
#	output:
#            "results/bed/{species}_CDS_chr{chrom}.bed"
#	conda:
#            "envs/bedtools.yaml"
#	shell:
#            "{input.script} CDS {wildcards.chrom} {wildcards.species} bedtools"
#
#rule bed_to_fasta:
#        input:
#            dna=get_dna_file,
#            bed="results/bed/{species}_{feature}_chr{chrom}.bed"
#        output:
#            "results/{species}_{feature}_chr{chrom}.fa"
#        conda:
#            "envs/bedtools.yaml"
#        shell:
#            "bedtools getfasta -name -s -fi {input.dna} -fo {output} -bed {input.bed}; sed -i 's/(+)//g' {output}; sed -i 's/(-)//g' {output}"
#
#rule merge_fasta:
#        input:
#            "results/{species}_{feature}_chr{chrom}.fa",
#        output:
#            "results/{species}_{feature}_chr{chrom}.fa.merged"
#        shell:
#            "MergeFasta.R"
#
#rule fasta_to_tsv_CDS:
#        input:
#           merged_fasta_CDS="results/{species}_CDS_chr{chrom}.fa.merged",
#           script="exe/targetscan7/convert_fasta_to_tsv2.sh"
#        output:
#           "results/{species}_CDS_chr{chrom}.tsv"
#        params:
#            tax_id = lambda wildcards: expand("{id}", id=config['tax_ids'][wildcards.species])
#        shell:
#           "{input.script} {input.merged_fasta_CDS} {params.tax_id} > {output}"
#
# biopython route - necessary for 3UTR alignments

rule index_maf_files:
	input:
	   maf="data/maf_{species}/chr{chrom}.maf",
	output:
	   protected("data/{species}_chr{chrom}.mafindex")
	benchmark:
           "benchmarks/{species}_chr{chrom}.mafindex.log"
	script:
	   "biopython_maf_processing.py"

rule gtf_to_bed:
        input:
            gtf_human=get_gtf_file,
            script="exe/pre-processing/gtf_to_bed.sh"
        output:
            "results/bed/{species}_{feature}.chr{chrom}.bed"
        conda:
            "envs/biopython.yaml"
        shell:
            "{input.script} {wildcards.feature} {wildcards.chrom} {wildcards.species}"

rule biopython_get_3UTR_tsv_alignments:
	input:
           maf="data/maf_{species}/chr{chrom}.maf",
           bed="results/bed/{species}_{feature}.chr{chrom}.bed",
           maf_index="data/{species}_chr{chrom}.mafindex",
           shell_script="exe/targetscan7/convert_fasta_to_tsv.sh"
	output:
           "results/{species}_chr{chrom}_{feature}_msa.tsv"
	params: 'nottest'
	conda:
           "envs/biopython.yaml"
	script:
           "biopython_maf_processing2.py"
