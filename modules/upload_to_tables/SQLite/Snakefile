#!/bin/bash

def get_tax_id(wildcards):
        return(config['tax_ids'][wildcards.species])

rule upload_to_gene_table: # Do we need to upload genes for every species?
        input:
           "results/{species}_gene_to_be_loaded.tsv",
           "results/gene_table_created.txt"
        output:
           "results/gene_table_loaded_{species}.txt"
        params:
           table="Gene"
        script:
           "upload_to_gene_table.py"

rule upload_to_gene_species_table:
        input:
           "results/{species}_gene_to_be_loaded.tsv",
	   "results/gene_species_table_created.txt"
        output:
           "results/gene_species_table_loaded_{species}.txt"
        params:
            table="Gene_species",
            tax_id=get_tax_id
        script:
           "upload_to_gene_species_table.py"

rule upload_to_utr_length_table:
	input:
		"results/{tissue}.utr.full.tsv"
	output:
		"results/utr_lengths_{tissue}_loaded.txt"
	params:
		table="utr_length"
	script:
		"upload_to_utr_length_table.py"

rule upload_to_mRNA_table:
        input:
           data="results/tx_and_gene_IDs.txt",
           script="sub_snakemake/upload_to_tables/SQLite/upload_to_table.py"
        output:
           "results/mRNA_table_loaded_{species}.txt"
	params:
		table="mRNA",
		columns=["mRNA_ID","annotator","annotation_version","Gene_ID"]
	script:
           "upload_to_table.py"

rule upload_to_Tissues_table:
        input:
           dependency="results/tissues_table_created.txt",
        output:
           "results/Tissues_table_loaded_{species}.txt"
        params:
           table="Tissues"
        script:
           "upload_to_tissues_table.py"

rule upload_to_samples_table:
        input:
           "data/read_sample_mapping.tsv"
        output:
           "results/samples_table_loaded_hsa.txt"
        params:
           table="Samples"
        script:
           "upload_to_samples_table.py"

rule upload_to_runs_table:
        input:
           "data/read_sample_mapping.tsv"
        output:
           "results/runs_table_loaded_hsa.txt"
        params:
           table="Runs"
        script:
           "upload_to_runs_table.py"

rule upload_to_expression_profiles_table:
        input:
           data="results/{tissue}_avg.sf",
           dependency_exp_table="results/expression_profiles_table_created.txt",
           dependency_mrna_loaded="results/mRNA_table_loaded_hsa.txt",
           script="exe/SQL/SQLite/upload_to_expression_profiles_table.py"
        output:
           "results/{tissue}_expression_profiles_table_loaded.txt"
        shell:
           "{input.script} {input.data} expression_profiles {output} {wildcards.tissue}"

rule upload_mirna_data:
        input:
            data="results/mature_mirna_for_db.tsv",
            dependency="results/mirna_table_created.txt",
            script="sub_snakemake/upload_to_tables/SQLite/upload_to_table.py"
        output:
            "results/mirnas_loaded.txt"
	params:
		table="miRNA",
		columns = ['name','species']
	script:
            "upload_to_table.py"

#rule load_in_contextpp_scores:
#        input:
#           contextpp_results="results/{species}_chr{chrom}_msa.contextpp.tsv",
#           script="src/load_contextpp.sh"
#        output:
#           "results/{species}_chr{chrom}_loaded.targetscan7.txt"
#        shell:
#           "{input.script} {input.contextpp_results} {wildcards.chrom} {wildcards.species}"

rule upload_to_contextpp_table:
        input:
            data=ancient("results/targets/{species}_{tissue}_msa.contextpp.tsv"),
            dependency=ancient("results/targetscan_table_created.txt")
        output:
            "results/table_uploads/contextpp_{species}_{tissue}_loaded.txt"
        params:
                table="contextpp",
                columns = ['mirna_id','mrna_id','Species','UTR_START','UTR_END','Site_Type','score','weighted_score']
        script:
            "upload_to_contextpp_table.py"

