#!/bin/bash

def get_tax_id(wildcards):
	return(config['tax_ids'][wildcards.species])

### miRNA prep ###

rule prep_mirna_seeds:
        input:                      
           data="data/mature.fa",
           script="exe/get_mirna_seeds.sh"
        output:
           "results/mature_mirna_seed.tsv"
        shell:
           "{input.script} {input.data} > {output}"

rule prep_mirna_family_file:
        input:
           mature_mirna_seeds="results/mature_mirna_seed.tsv"
        output:
           "results/{species}_mirna_family_tmp.tsv",
        script:
           "get_mirna_family.R"

rule prep_mirna_mature_alt:
        input:
           data="data/mature.fa",
           script="exe/prep_mirna_mature_alt.sh"
        output: "results/{species}_mature_mirna.tsv"
	params: get_tax_id
        shell:
           "{input.script} {input.data} {wildcards.species} {params} > {output}"

rule prep_mir_for_context_scores:
        input:
           mature_mirnas="results/{species}_mature_mirna.tsv",
           mirna_seed="results/{species}_mirna_family_tmp.tsv",
        output:
           "results/{species}_mir_for_context_scores_tmp.tsv"
        script:
           "get_mirna_context.R"

rule filter_mir_for_context_scores:
       input: "results/{species}_mir_for_context_scores_tmp.tsv"
       output: "results/{species}_mir_for_context_scores.tsv"
       script: "filter_mir_for_context_scores.R"

rule filter_mir_families:
       input: 
               mirna_families="results/{species}_mirna_family_tmp.tsv",
               mature_mirnas="results/{species}_mir_for_context_scores.tsv"
       output: "results/{species}_mirna_family.tsv"
       script: "filter_mir_families.R"

### main ###

rule targetscan_branch_lengths:
        input:
           msa_3UTR="results/msa/{species}_{tissue}_chr{chrom}_3UTR_msa.tsv",
           script="exe/targetscan7/targetscan_70_BL_bins.patch.pl"
        output:
             "results/targets/{species}_{tissue}_chr{chrom}_msa.branch_lengths.tsv"
        params: 
              tax_id=get_tax_id
        benchmark:
             "benchmarks/branch_lengths_{species}_{tissue}_chr{chrom}.log"
        shell:
            "{input.script} {input.msa_3UTR} {params.tax_id}  > {output}"

rule targetscan_PCTs:
        input:
            mirna_family="results/{species}_mirna_family.tsv",
            mirna_sites="results/targets/{species}_{tissue}_chr{chrom}_msa.sites.tsv",
            branch_lengths="results/targets/{species}_{tissue}_chr{chrom}_msa.branch_lengths.tsv",
            script="exe/targetscan7/targetscan_70_BL_PCT.patch.pl",
            PCT_param="exe/targetscan7/PCT_parameters"
        output:
            "results/targets/{species}_{tissue}_chr{chrom}_msa.PCTs.tsv",
             temp("results/targets/{species}_{tissue}_chr{chrom}_msa.sites.tsv.sort.txt") # it is important that this file is deleted
        benchmark:
            "benchmarks/{species}_{tissue}_chr{chrom}_msa.PCTs.log"
        shell:
            "{input.script} {input.mirna_family} {input.mirna_sites} {input.branch_lengths} > {output}"

rule targetscan_eightmers:
        input:
            mirna_seeds="results/{species}_mirna_family.tsv",
            CDS="results/msa/{species}_{tissue}_chr{chrom}_CDS_msa.tsv",
            script="exe/targetscan7/targetscan_count_8mers.pl"
        output:
            eightmer_counts="results/targets/{species}_{tissue}_chr{chrom}_msa.eightmers.tsv",
            CDS_lengths="results/msa/{species}_{tissue}_chr{chrom}_CDS_msa.tsv.lengths.txt"
        shell:
            "{input.script} {input.mirna_seeds} {input.CDS} > {output.eightmer_counts}"

rule targetscan_context_scores:
        input:
            mirnas="results/{species}_mir_for_context_scores.tsv",
            msa="results/msa/{species}_{tissue}_chr{chrom}_3UTR_msa.tsv",
            PCTs="results/targets/{species}_{tissue}_chr{chrom}_msa.PCTs.tsv",
            CDS_lengths="results/msa/{species}_{tissue}_chr{chrom}_CDS_msa.tsv.lengths.txt",
            eightmer_counts="results/targets/{species}_{tissue}_chr{chrom}_msa.eightmers.tsv",
            contextpp_script="exe/targetscan7/targetscan_70_context_scores.patch.pl",
            agarwal_param="exe/targetscan7/Agarwal_2015_parameters.txt",
            AIRs="results/targets/{species}_{tissue}_chr{chrom}.AIRs.txt", #exe/targetscan7/All_cell_lines.AIRs.txt",
            TA_SPS_param="exe/targetscan7/TA_SPS_by_seed_region.txt",
            script="exe/targetscan7/targetscan_70_context_scores.patch.pl"
        output:
            "results/targets/{species}_{tissue}_chr{chrom}_msa.contextpp.tsv"
        #conda: "envs/viennarna.yaml" 
        params:
            RNAplfold_dir="results/targets/RNAplfold/{species}/{tissue}",
            tax_id = get_tax_id
        benchmark:
            "benchmarks/{species}_{tissue}_chr{chrom}_msa.contextpp.log"
        shell:
            "{input.script} {input.mirnas} {input.msa} {input.PCTs} {input.CDS_lengths} {input.eightmer_counts} {output} {params.tax_id} {input.AIRs} {params.RNAplfold_dir}"

rule aggregate_contextpp_scores:
       input: lambda wildcards: expand("results/targets/{species}_{tissue}_chr{chrom}_msa.contextpp.tsv", chrom=config['chromosomes'][wildcards.species], species=wildcards.species, tissue=wildcards.tissue)
       output: protected("results/targets/{species}/{tissue}.contextpp.tsv")
       shell: "cat {input} | sed '1b;/Gene/d' > {output}"

### other ###

#rule delete_RNAplfold_output:
#	input:
#	output: temp("results/clean_RNAplfold_directory_{species}_{tissue}.txt")
#	shell: "rm -f results/targets/RNAplfold/{wildcards.species}/{wildcards.tissue}/*.fa && rm -f results/targets/RNAplfold/{wildcards.species}/{wildcards.tissue}/*.fa && touch {output}" 

rule get_all_transcripts:
	input: "results/bed/{species}_{tissue}.utr.full.bed"
	output: "results/bed/{species}_{tissue}_all_transcripts.txt"
	shell: "awk '{{ print $5}}' {input} | sort | uniq > {output}"

rule patch_bin_lengths_script:
        input:
           BL_bins="exe/targetscan7/targetscan_70_BL_bins.pl",
           patch_script="exe/targetscan7/patch_branch_lengths.sh"
        output:
          "exe/targetscan7/targetscan_70_BL_bins.patch.pl"
        shell:
          "{input.patch_script} {input.BL_bins} > {output}" # force reference species as a parameter

rule patch_PCT_script:
        input:
           "exe/targetscan7/targetscan_70_BL_PCT.pl"
        output:
          "exe/targetscan7/targetscan_70_BL_PCT.patch.pl"
        shell:
          "sed -e '55 s;PCT_param;exe\/targetscan7\/PCT_param;g' {input} > {output}" # force reference species as a parameter

rule patch_contextpp_script:
        input:
           contextpp="exe/targetscan7/targetscan_70_context_scores.pl",
           patch_script="exe/targetscan7/patch_context_scores.sh"
        output:
          "exe/targetscan7/targetscan_70_context_scores.patch.pl"
        shell:
          "{input.patch_script} {input.contextpp} > {output}" # force reference species as a parameter
