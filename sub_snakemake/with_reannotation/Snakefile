def get_gtf_file(wildcards):
        sci_species_name = config['sci_species_name'][wildcards.species]
        genome_build = config['genome_build'][wildcards.species]

        return ( 'data/' + sci_species_name + '.' + genome_build + '.{}.mod.chr.gtf'.format(config['ensembl_release'])  )

def get_bed_file(wildcards):
        sci_species_name = config['sci_species_name'][wildcards.species]
        genome_build = config['genome_build'][wildcards.species]

        return('results/' + sci_species_name + '.' + genome_build + '_chr{}.{}.filtered.bed'.format(wildcards.chrom, config['ensembl_release']))

def get_bed6_file(wildcards):
        sci_species_name = config['sci_species_name'][wildcards.species]
        genome_build = config['genome_build'][wildcards.species]

        return ( 'results/' + sci_species_name + '.' + genome_build + '.{}.chr{}.filtered.bed6'.format(config['ensembl_release'], wildcards.chrom) )

rule get_bed6_file: #three_prime_utrs only
        input:
            script="exe/gtf_to_bed.sh",
<<<<<<< HEAD
            gtf="data/{genus_species}.{build}.{ensembl_release}.chr.gtf"
        output:
            "results/{genus_species}.{build}.{ensembl_release}.bed6"
        shell:
            "{input.script} {input.gtf} {output}"

rule filter_bed6_file:
        input:  'results/{genus_species}.{build}.{ensembl_release}.bed6' #'results/{prefix}.chr{chrom}.bed6'
        output:  'results/{genus_species}.{build}.{ensembl_release}.filtered.bed6'
        script: 'filter_bed6.R'

rule split_bed6_file:
        input: 'results/{genus_species}.{build}.{ensembl_release}.filtered.bed6'
        output: 'results/{genus_species}.{build}.{ensembl_release}.chr{chrom}.filtered.bed6'
        shell: 'grep -E "^{wildcards.chrom}" {input} > {output} || true'

=======
            gtf="data/{prefix}.chr.gtf"
        output:
            "results/{prefix}.bed6"
        shell:
            "{input.script} {input.gtf} {output}"

rule split_bed6_file:
        input: 'results/{prefix}.bed6'
        output: 'results/{prefix}.chr{chrom}.bed6'
        shell: 'grep -E "^{wildcards.chrom}" {input} > {output}'

rule filter_bed6_file:
        input: 'results/{prefix}.chr{chrom}.bed6'
        output: 'results/{prefix}.chr{chrom}.filtered.bed6'
        script: 'filter_bed6.R'

>>>>>>> 0753dd5... large overhaul of sub_snakemake directory structure
# derived from https://gist.github.com/gireeshkbogu/f478ad8495dca56545746cd391615b93

rule convert_gtf_to_genepred:
     input:
         gtf="data/{species_prefix}.{ensembl_release}.mod.chr.gtf"
     output:
         "results/{species_prefix}.{ensembl_release}.genePred"
     conda: "envs/ucsc.yaml"
     shell:
         "gtfToGenePred {input.gtf} {output}"

rule convert_genepred_to_bed12:
     input:
         genepred="results/{species_prefix}.{ensembl_release}.genePred"
     output:
         "results/{species_prefix}.{ensembl_release}.bed"
     wildcard_constraints:
               species_prefix="((?!chr).)*" # anything not containing chr
     conda: "envs/ucsc.yaml"
     shell:
         "genePredToBed {input.genepred} {output}"

rule get_bedgraph:
    input:
        sorted_bam="results/bam/run/{species}/{accession}.bam.sorted",
    output:
        "results/bam/run/{species}/{accession}.bedgraph"
    conda:
        "envs/bedtools.yaml"
    wildcard_constraints:
               accession="((?!_chr).)*"
    benchmark:
        "benchmarks/genomeCoverageBed/{species}/{accession}.txt"
    shell:
        "genomeCoverageBed -bg -ibam {input.sorted_bam} -split > {output}"

rule split_bedgraph:
        input: 'results/bam/run/{species}/{accession}.bedgraph'
        output: 'results/bam/run/{species}/{accession}_chr{chrom}.bedgraph'
        shell: 'grep -E "^{wildcards.chrom}\s" {input} > {output}'

rule merge_bedgraphs_by_run:
        input:
             lambda wildcards: expand("results/bam/run/{species}/{accession}_chr{chrom}.bedgraph", species=wildcards.species, accession=config['samples'][wildcards.sample], chrom=wildcards.chrom)
        output:
             temp("results/bam/sample/{species}/{sample}_chr{chrom}_tmp.bedgraph")
        wildcard_constraints:
             sample="((?!tmp).)*"
        conda:
             "envs/bedtools.yaml"
        script: "merge_bedgraphs.py"

rule avg_merged_bedgraph_by_run:
        input:
                "results/bam/sample/{species}/{sample}_chr{chrom}_tmp.bedgraph"
        output:
                temp("results/bam/sample/{species}/{sample}_chr{chrom}.bedgraph")
        wildcard_constraints:
             sample="((?!tmp).)*"
        script:
                "get_average_bedgraph.R"

rule merge_bedgraphs_by_sample:
        input:
             lambda wildcards: expand("results/bam/sample/{species}/{sample}_chr{chrom}.bedgraph", species=wildcards.species, sample=config['tissues'][wildcards.species][wildcards.cell_line], chrom=wildcards.chrom)
        output:
             temp("results/bam/tissue/{species}/{cell_line}_chr{chrom}.bedgraph.tmp")
        wildcard_constraints:
               cell_line="((?!chr).)*" # anything not containing chr
        conda:
             "envs/bedtools.yaml"
        script: "merge_bedgraphs.py"

rule avg_merged_bedgraph_by_sample:
        input:
                "results/bam/tissue/{species}/{cell_line}_chr{chrom}.bedgraph.tmp"
        output:
                temp("results/bam/tissue/{species}/{cell_line}_chr{chrom}.bedgraph")
        wildcard_constraints:
               cell_line="((?!chr).)*" # anything not containing chr
        script:
                "get_average_bedgraph.R"

rule split_bed12:
        input: 'results/{species_prefix}.{ensembl_release}.bed'
        output:'results/{species_prefix}_chr{chrom}.{ensembl_release}.bed'
        shell: 'grep -E "^{wildcards.chrom}\s" {input} > {output}'

rule filter_bed12:
        input: 'results/{species_prefix}_chr{chrom}.{ensembl_release}.bed'
        output: 'results/{species_prefix}_chr{chrom}.{ensembl_release}.filtered.bed'
        script: "filter_bed12.R"

rule reannotate_3utrs:
    input:
       script="exe/identifyDistal3UTR.pl",
       bed=get_bed_file,
       bedgraphs= 'results/bam/tissue/{species}/{cell_line}_chr{chrom}.bedgraph'
    benchmark: "benchmarks/APAtrap/{species}_{cell_line}_chrom{chrom}.log"
    output:
       "results/bed/{species}_{cell_line}_chr{chrom}.utr.bed"
    shell:
       "{input.script} -i {input.bedgraphs} -m {input.bed} -o {output}"

rule get_extended_bed_file:
         input:
            normal_bed= get_bed6_file,
            extended_bed="results/bed/{species}_{tissue}_chr{chrom}.utr.bed",
            all_transcripts="results/bed/{species}_chr{chrom}_all_transcripts.txt"
         output:
            "results/bed/{species}_{tissue}_3UTR.chr{chrom}.bed"
         log:
            "{species}_{tissue}_chr{chrom}.log"
         script:
             "extend_bed2.R"

rule aggregrate_extended_bed_files:
        input: lambda wildcards: expand("results/bed/{species}_{tissue}_3UTR.chr{chrom}.bed", chrom=config['chromosomes'][wildcards.species], species=wildcards.species, tissue=wildcards.tissue)
        output: "results/bed/{species}_{tissue}_3UTR.bed"
        shell: "cat {input} > {output}"

### Generate AIR file

rule identify_APA_sites:
     input:
        script="exe/predictAPA.pl",
        bedgraphs= "results/bam/tissue/{species}/{tissue}_chr{chrom}.bedgraph",
        bed="results/bed/{species}_{tissue}_chr{chrom}.utr.bed"
     output:
        "results/targets/{species}_{tissue}_chr{chrom}.APA.txt"
     shell:
        "{input.script} -i {input.bedgraphs} -g 1 -n 1 -u {input.bed}  -o {output}"

rule aggregate_APA_sites:
        input: lambda wildcards: expand("results/targets/{species}_{tissue}_chr{chrom}.APA.txt", chrom=config['chromosomes'][wildcards.species], species=wildcards.species, tissue=wildcards.tissue)
        output: protected("results/targets/{species}_{tissue}.APA.txt")
        shell: "cat {input} | sed '1b;/Gene/d' > {output}"

rule get_utr_lengths_chr:
	input: 'results/bed/{species}_{tissue}_3UTR.chr{chrom}.bed'
	output: 'results/utrs/{species}_{tissue}_chr{chrom}.utr.lengths.tsv'
	script: 'get_utr_lengths.R'

rule get_utr_lengths:
        input:  'results/bed/{species}_{tissue}_3UTR.bed'
        output: 'results/utrs/{species}_{tissue}.utr.lengths.tsv'
        script: 'get_utr_lengths.R'

rule get_AIR_file:
        input: "results/targets/{species}_{tissue}_chr{chrom}.APA.txt", "results/utrs/{species}_{tissue}_chr{chrom}.utr.lengths.tsv" #output from APA usage file
        output: "results/targets/{species}_{tissue}_chr{chrom}.AIRs.txt"
        script: "get_tissue_specific_APA_file.R"

### Get CDS bed file

rule gtf_to_bed_CDS:
        input:
            gtf=get_gtf_file,
            script="exe/pre-processing/gtf_to_bed.sh"
        output:
<<<<<<< HEAD
            "results/bed/{species}_{tissue}_CDS.tmp.bed"
        conda:
            "envs/biopython.yaml"
        shell:
            "{input.script} {input.gtf} CDS {output}"

rule filter_CDS:
	input: "results/bed/{species}_{tissue}_CDS.tmp.bed"
	output: "results/bed/{species}_{tissue}_CDS.filtered.bed"
	script: "filter_bed6.R"

rule split_CDS:
        input: "results/bed/{species}_{tissue}_CDS.filtered.bed"
        output: "results/bed/{species}_{tissue}_CDS.chr{chrom}.filtered.bed"
        shell: 'grep -E "^{wildcards.chrom}" {input} > {output} || true'
=======
            "results/bed/{species}_{tissue}_CDS.chr{chrom}.tmp.bed"
        conda:
            "envs/biopython.yaml"
        shell:
            "{input.script} {input.gtf} CDS {wildcards.chrom} {output}"

rule filter_bed_file_CDS:
        input: "results/bed/{species}_{tissue}_CDS.chr{chrom}.tmp.bed"
        output: "results/bed/{species}_{tissue}_CDS.chr{chrom}.bed"
        script: "filter_bed6.R"
>>>>>>> 0753dd5... large overhaul of sub_snakemake directory structure

### filtering by expression level

rule expression_filter_contextpp_scores_chr:
        input:
                contextpp_scores="results/targets/{species}_{tissue}_chr{chrom}_msa.contextpp.tsv",
                expression_values="results/salmon/{species}/{tissue}.sf"
        params:
                tpm_expression_threshold=2
        output: protected("results/targets/{species}/{tissue}_chr{chrom}.contextpp.filt.tsv")
        script: 'filter_contextpp_scores.R'

rule expression_filter_contextpp_scores:
        input:
            contextpp_scores="results/targets/{species}/{tissue}.contextpp.tsv",
            expression_values="results/salmon/{species}/{tissue}.sf"
        params:
            tpm_expression_threshold=2
        output: protected("results/targets/{species}/{tissue}.contextpp.filt.tsv")
        script: 'filter_contextpp_scores.R'

<<<<<<< HEAD
rule expression_filter_miRanda_chr:
=======
rule expression_filter_miRanda_nr_chr:
>>>>>>> 0753dd5... large overhaul of sub_snakemake directory structure
        input:
            miRanda_scores="results/targets/miRanda/{species}/{tissue}_chr{chrom}.tsv",
            expression_values="results/salmon/{species}/{tissue}.sf"
        params:
            tpm_expression_threshold=0
        output: protected("results/targets/miRanda/{species}/{tissue}/chr{chrom}.filt.tsv")
        script: 'filter_miRanda_scores.R'

<<<<<<< HEAD
rule expression_filter_miRanda:
=======
rule expression_filter_miRanda_nr:
>>>>>>> 0753dd5... large overhaul of sub_snakemake directory structure
        input:
            miRanda_scores="results/targets/miRanda/{species}/{tissue}.tsv",
            expression_values="results/salmon/{species}/{tissue}.sf"
        params:
            tpm_expression_threshold=0
        output: protected("results/targets/miRanda/{species}/{tissue}.filt.tsv")
        script: 'filter_miRanda_scores.R'
