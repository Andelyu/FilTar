#!/bin/bash

def get_tax_id(wildcards):
        return(config['tax_ids'][wildcards.species])

def get_gtf_file(wildcards):
        sci_species_name = config['sci_species_name'][wildcards.species]
        genome_build = config['genome_build'][wildcards.species]

        return ( 'data/' + sci_species_name + '.' + genome_build + '.{}.mod.chr.gtf'.format(config['ensembl_release'])  )

### get AIR file 

rule gtf_to_bed_no_reannotation:
        input:
            gtf=get_gtf_file,
            script="exe/pre-processing/gtf_to_bed.sh"
        output:
<<<<<<< HEAD
            "results/bed/{species}_{feature}.bed"
        shell:
            "{input.script} {input.gtf} {wildcards.feature} {output}"
=======
            "results/bed/{species}_{feature}.chr{chrom}.bed"
        shell:
            "{input.script} {input.gtf} {wildcards.feature} {wildcards.chrom} {output}"
>>>>>>> 0753dd5... large overhaul of sub_snakemake directory structure

rule get_utr_lengths_no_reannotation:
        input:  'results/bed/{species}_3UTR.chr{chrom}.bed'
        output: 'results/targets/{species}_chr{chrom}.utr.lengths.tsv'
        script: 'get_utr_lengths.R'

rule get_air_file_no_reannotation:
	input: "results/targets/{species}_chr{chrom}.utr.lengths.tsv"
	output: 'results/targets/{species}_nr_chr{chrom}.AIRs.txt'
	script: 'get_canonical_AIR.R'

rule aggregate_chromosomal_AIR_files:
        input: lambda wildcards: expand("results/targets/{species}_chr{chrom}.utr.lengths.tsv", chrom=config['chromosomes'][wildcards.species], species=wildcards.species)
        output: 'results/targets/{species}_nr.AIRs.txt'
        script: 'get_canonical_AIR.R'

###

<<<<<<< HEAD
rule split_bed6:
        input: "results/bed/{species}_3UTR.bed"
        output: "results/bed/{species}_3UTR.chr{chrom}.bed"
        shell: 'grep -E "^{wildcards.chrom}" {input} > {output}'

rule filter_bed6_file_no_reannotation:
        input: "results/bed/{species}_{feature}.bed"
        output: "results/bed/{species}_nr_{feature}.bed"
        script: 'filter_bed6.R'

rule split_filtered_bed6:
	input: "results/bed/{species}_nr_{feature}.bed"
	output: "results/bed/{species}_nr_{feature}.chr{chrom}.bed"
	shell: 'grep -E "^{wildcards.chrom}" {input} > {output} || true'

### filter by expression level

rule expression_filter_contextpp_scores_chr_no_reannotation:
=======
rule filter_bed6_file_no_reannotation:
        input: "results/bed/{species}_{feature}.chr{chrom}.bed"
        output: "results/bed/{species}_nr_{feature}.chr{chrom}.bed"
        script: 'filter_bed6.R'

### filter by expression level

rule expression_filter_contextpp_scores_chr:
>>>>>>> 0753dd5... large overhaul of sub_snakemake directory structure
        input:
                contextpp_scores="results/targets/{species}_nr_chr{chrom}_msa.contextpp.tsv",
                expression_values="results/salmon/{species}/{tissue}.sf"
        params:
                tpm_expression_threshold=0
        output: protected("results/targets/{species}/nr_{tissue}_chr{chrom}.contextpp.filt.tsv")
        script: 'filter_contextpp_scores.R'

<<<<<<< HEAD
rule expression_filter_contextpp_scores_no_reannotatin:
=======
rule expression_filter_contextpp_scores:
>>>>>>> 0753dd5... large overhaul of sub_snakemake directory structure
        input:
            contextpp_scores="results/targets/{species}/nr.contextpp.tsv",
            expression_values="results/salmon/{species}/{tissue}.sf"
        params:
            tpm_expression_threshold=0
        output: protected("results/targets/{species}/nr_{tissue}.contextpp.filt.tsv")
        script: 'filter_contextpp_scores.R'

rule expression_filter_miRanda_nr_chr:
        input:
            miRanda_scores="results/targets/miRanda/{species}/nr_chr{chrom}.tsv",
            expression_values="results/salmon/{species}/{tissue}.sf"
        params:
            tpm_expression_threshold=0
        output: protected("results/targets/miRanda/{species}/nr_{tissue}/chr{chrom}.filt.tsv")
        script: 'filter_miRanda_scores.R'

rule expression_filter_miRanda_nr:
        input:
            miRanda_scores="results/targets/miRanda/{species}/nr.tsv",
            expression_values="results/salmon/{species}/{tissue}.sf"
        params:
            tpm_expression_threshold=0
        output: protected("results/targets/miRanda/{species}/nr_{tissue}.filt.tsv")
        script: 'filter_miRanda_scores.R'
