subworkflow main_workflow:
        workdir: ".."
        snakefile: "../Snakefile"

def get_gtf_file(wildcards):
	print(wildcards)
	if wildcards.species == 'hsa':
		return ('data/Homo_sapiens.GRCh38.94.gtf')
	elif wildcards.species == 'mmu':
		return ('data/Mus_musculus.GRCm38.94.gtf')

def get_bed6_file(wildcards):
        print(wildcards)
        if wildcards.species == 'hsa':
                return('results/Homo_sapiens.GRCh38.92.bed6')
        elif wildcards.species == 'mmu':
                return('results/Mus_musculus.GRCm38.92.bed6')

rule index_maf_files:
	input:
	   maf="data/maf_{species}/chr{chrom}.maf",
	output:
	   protected("data/{species}_chr{chrom}.mafindex")
	benchmark:
           "benchmarks/{species}_chr{chrom}.mafindex.log"
	script:
	   "biopython_maf_processing.py"

rule get_all_transcript_ids:
	input:
		gtf=get_gtf_file
	output: "results/bed/{species}_all_transcripts.txt"
	shell: "exe/get_all_transcripts.sh {input} > {output}"

rule gtf_to_bed_CDS:
        input:
            gtf=get_gtf_file,
            script="exe/pre-processing/gtf_to_bed.sh"
        output:
            "results/bed/{species}_{tissue}_CDS.chr{chrom}.bed"
        conda:
            "envs/biopython.yaml"
        shell:
            "{input.script} {input.gtf} CDS {wildcards.chrom} {output}"

rule gtf_to_bed_canonical:
        input:
            gtf=get_gtf_file,
            script="exe/pre-processing/gtf_to_bed.sh"
        output:
            "results/bed/canonical/{species}_{feature}.chr{chrom}.bed"
        conda:
            "envs/biopython.yaml"
        shell:
            "{input.script} {input.gtf} {wildcards.feature} {wildcards.chrom} {output}"

rule split_bed:
        input:
                "results/bed/{species}_{tissue}.utr.full.bed"
        output:
                "results/bed/{species}_{tissue}_3UTR.chr{chrom}.bed"
        shell:
                "grep '^{wildcards.chrom}\t' {input} > {output}"

rule biopython_get_msa:
	input:
           maf=main_workflow("data/maf_{species}/chr{chrom}.maf"),
           bed="results/bed/{species}_{tissue}_{feature}.chr{chrom}.bed",
           maf_index=main_workflow("data/{species}_chr{chrom}.mafindex"),
           shell_script="../exe/targetscan7/convert_fasta_to_tsv.sh"
	output:
           "results/msa/{species}_{tissue}_chr{chrom}_{feature}_msa.tsv"
	conda:
           "envs/biopython.yaml"
	script:
           "biopython_maf_processing2.py"

rule biopython_get_canonical_msa:
        input:
           maf=main_workflow("data/maf_{species}/chr{chrom}.maf"),
           bed="results/bed/canonical/{species}_{feature}.chr{chrom}.bed",
           maf_index=main_workflow("data/{species}_chr{chrom}.mafindex"),
           shell_script="../exe/targetscan7/convert_fasta_to_tsv.sh"
        output:
           "results/msa/canonical/{species}_chr{chrom}_{feature}_msa_tmp.tsv"
        conda:
           "envs/biopython.yaml"
        script:
           "biopython_maf_processing2.py"

rule get_utr_lengths:
        input:  'results/bed/{species}_{cell_line}.utr.full.bed'
        output: 'results/utrs/{species}_{cell_line}.utr.lengths.tsv'
        script: 'get_utr_lengths.R'
