#!/bin/bash

rule download_fetchChromSizes:
     output: "exe/fetchChromSizes"
     shell: "wget --directory-prefix=exe/ http://hgdownload.cse.ucsc.edu/admin/exe/linux.x86_64/fetchChromSizes"

rule download_gtfToGenePred:
     output: "exe/gtfToGenePred"
     shell: "wget --directory-prefix=exe/ http://hgdownload.cse.ucsc.edu/admin/exe/linux.x86_64/gtfToGenePred"

rule download_genePredToBed:
     output: "exe/genePredToBed"
     shell: "wget --directory-prefix=exe/ http://hgdownload.cse.ucsc.edu/admin/exe/linux.x86_64/genePredToBed"

rule get_gtf_file:
     output: "data/Homo_sapiens.GRCh38.92.gtf"
     shell: "wget --directory-prefix=data/ ftp://ftp.ensembl.org/pub/release-92/gtf/homo_sapiens/Homo_sapiens.GRCh38.92.gtf.gz && gunzip data/Homo_sapiens.GRCh38.92.gtf.gz && sed -i 's/^/chr/g' data/Homo_sapiens.GRCh38.92.gtf"

# derived from https://gist.github.com/gireeshkbogu/f478ad8495dca56545746cd391615b93

rule convert_gtf_to_genepred:
     input:
         script="exe/gtfToGenePred",
         gtf="data/Homo_sapiens.GRCh38.92.gtf"
     output:
         "results/Homo_sapiens.GRCh38.92.genePred"
     shell:
         "{input.script} {input.gtf} {output}"

rule convert_genepred_to_bed12:
     input:
         script="exe/genePredToBed",
         genepred="results/Homo_sapiens.GRCh38.92.genePred"
     output:
         "results/Homo_sapiens.GRCh38.92.bed"
     shell:
         "{input.script} {input.genepred} {output}"

rule get_chrom_sizes:
     input:
         "exe/fetchChromSizes"
     output:
         "results/hg38.chrom.sizes"
     shell:
         "{input} hg38 > results/hg38.chrom.sizes"

rule get_bedgraph:
    input:
        sorted_bam="results/bam/{accession}.bam.sorted",
    output:
        "results/bam/{accession}.bedgraph"
    conda:
        "envs/bedtools.yaml"
    benchmark:
        "benchmarks/genomeCoverageBed/{accession}.txt"
    shell:
        "genomeCoverageBed -bg -ibam {input.sorted_bam} -split > {output}"

rule merge_bedgraphs_by_sample:
        input:
             lambda wildcards: expand("results/bam/{accession}.bedgraph", accession=config['samples'][wildcards.sample])
        output:
             "results/{sample}_tmp.bedgraph"
        wildcard_constraints:
             sample="[E|D|S]RS.*"
        conda:
             "envs/bedtools.yaml"
        script: "merge_bedgraphs_by_sample.py"
                #if len(input) > 1:
                #        shell("bedtools unionbedg -i {input} > {output}")
                #else:
                #        shell("cp {input} {output}")

rule avg_merged_bedgraph:
        input:
                "results/{sample}_tmp.bedgraph"
        output:
                "results/{sample}.bedgraph"
        wildcard_constraints:
             sample="[E|D|S]RS.*[0-9]"
        script:
                "get_average_bedgraph.R"

rule merge_bedgraphs_by_cell_line:
        input:
             lambda wildcards: expand("results/{cell_line}.bedgraph", cell_line=config['PRJNA229375'][wildcards.cell_line])
        output:
             "results/{cell_line}_tmp.bedgraph"
        conda:
             "envs/bedtools.yaml"
        shell: "bedtools unionbedg -i {input} > {output}"

rule avg_merged_bedgraph_by_cell_line:
        input:
                lambda wildcards: expand("results/{cell_line}_tmp.bedgraph", cell_line=config['PRJNA229375'][wildcards.cell_line])
        output:
                "results/{cell_line}.bedgraph"
        wildcard_constraints:
             sample="[E|D|S]RS.*[0-9]"
        script:
                "get_average_bedgraph.R"

#rule reannotatate_3utrs_in_cell_lines:
#     input:
#        script="exe/identifyDistal3UTR.pl",
#        bedgraph1= lambda wildcards: 'results/' + str(config['PRJNA229375'][wildcards.cell_line]['mock'][0]) + '.bedgraph',
#       bedgraph2= lambda wildcards: 'results/' + str(config['PRJNA229375'][wildcards.cell_line]['mock'][1]) + '.bedgraph',
#        bed="results/Homo_sapiens.GRCh38.92.bed"
#     benchmark: "benchmarks/APAtrap/{cell_line}.log"
#     output:
#        "results/{cell_line}.utr.bed"
#     shell:
#        "{input.script} -i {input.bedgraph1} {input.bedgraph2} -m {input.bed}  -o {output}"

#rule reannotate_3utrs_brain:
#    input:
#       script="exe/identifyDistal3UTR.pl",
#       bed="results/Homo_sapiens.GRCh38.92.bed",
#       bedgraphs= lambda wildcards: 'results/' + str(config['brain'][wildcards.brain_region]) + '.bedgraph'
#    benchmark: "benchmarks/APAtrap/{brain_region}.log"
#    output:
#       "results/{brain_region}.utr.bed"
#    shell:
#       "{input.script} -i {input.bedgraphs} -m {input.bed} -o {output}"

#rule reannotate_3utrs:
#    input:
#       script="exe/identifyDistal3UTR.pl",
#       bed="results/Homo_sapiens.GRCh38.92.bed",
#       bedgraphs= 'results/{accession}.bedgraph'
#    benchmark: "benchmarks/APAtrap/{accession}.log"
#    output:
#       "results/{accession}.utr.bed"
#    shell:
#       "{input.script} -i {input.bedgraphs} -m {input.bed} -o {output}"


#rule identify_APA_sites_in_cell_lines:
#     input:
#        script="exe/predictAPA.pl",
#        bedgraph1= lambda wildcards: 'results/' + str(config['PRJNA229375'][wildcards.cell_line]['mock'][0]) + '.bedgraph',
#        bedgraph2= lambda wildcards: 'results/' + str(config['PRJNA229375'][wildcards.cell_line]['mock'][1]) + '.bedgraph',
#        bed="results/{cell_line}.utr.bed"
#     output:
#        "{cell_line}.APA.txt"
#     shell:
#        "{input.script} -i {input.bedgraph1} {input.bedgraph2} -g 1 -n 2 -u {input.bed}  -o {output}"

#rule identify_APA_sites_in_brain_tissue:
#     input:
#        script="exe/predictAPA.pl",
#        bedgraphs= lambda wildcards: 'results/' + str(config['brain'][wildcards.brain_region]),
#        bed="results/{brain_region}.utr.bed"
#     output:
#        "{brain_region}.APA.txt"
#     shell:
#        "{input.script} -i {input.bedgraphs} -g 1 -n 1 -u {input.bed}  -o {output}"





